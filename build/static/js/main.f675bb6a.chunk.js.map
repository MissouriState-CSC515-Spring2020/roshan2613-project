{"version":3,"sources":["img/recent.JPG","img/sport.JPG","img/food.JPG","img/monuments.JPG","img/nature.JPG","img/car.JPG","Nav.js","Recent.js","Sport.js","Food.js","Monument.js","Nature.js","Car.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","navStyle","color","className","style","to","Recent","src","recent","Sport","sport","Food","food","Monument","monumnet","Nature","nature","Car","car","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,yJCiD5BC,MA3Cf,WAEE,IAAMC,EAAW,CACfC,MAAO,SAGT,OACC,6BAEI,mDAGA,wBAAIC,UAAY,aACd,kBAAC,IAAD,CAAMC,MAASH,EAAUI,GAAK,WAC5B,uCAGA,kBAAC,IAAD,CAAMD,MAASH,EAAUI,GAAK,UAC9B,sCAGA,kBAAC,IAAD,CAAMD,MAASH,EAAUI,GAAK,SAC9B,qCAGA,kBAAC,IAAD,CAAMD,MAASH,EAAUI,GAAK,aAC9B,yCAGA,kBAAC,IAAD,CAAMD,MAASH,EAAUI,GAAK,WAC9B,uCAGA,kBAAC,IAAD,CAAMD,MAASH,EAAWI,GAAK,QAC/B,uC,iBCzBIC,MAXf,WACE,OACE,6BACI,8CACF,yBAAKC,IAAOC,Q,iBCQHC,MAZf,WACE,OACE,6BACI,8CACA,yBAAKF,IAAOG,Q,iBCQLC,MAZf,WACE,OACE,6BACI,6CACA,yBAAKJ,IAAOK,Q,iBCQLC,MAZf,WACE,OACE,6BACI,iDACA,yBAAKN,IAAOO,Q,iBCQLC,MAZf,WACE,OACE,6BACI,+CACA,yBAAKR,IAAOS,Q,iBCQLC,MAZf,WACE,OACE,6BACI,2CACA,yBAAKV,IAAOW,Q,OCsBpB,IAAMC,EAAO,kBACX,6BACE,2CAIWC,EAzBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKjB,UAAU,OAChB,kBAAC,EAAD,MACA,gCACA,kBAAC,IAAD,CAAOkB,KAAO,IAAIC,OAAK,EAACC,UAAaJ,IACrC,kBAAC,IAAD,CAAOE,KAAO,UAAUE,UAAajB,IACrC,kBAAC,IAAD,CAAOe,KAAO,SAASE,UAAad,IACpC,kBAAC,IAAD,CAAOY,KAAO,QAAQE,UAAaZ,IACnC,kBAAC,IAAD,CAAOU,KAAO,YAAYE,UAAaV,IACvC,kBAAC,IAAD,CAAOQ,KAAO,UAAUE,UAAaR,IACrC,kBAAC,IAAD,CAAOM,KAAO,OAAOE,UAAaN,QCXjBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f675bb6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/recent.074caff6.JPG\";","module.exports = __webpack_public_path__ + \"static/media/sport.5a028183.JPG\";","module.exports = __webpack_public_path__ + \"static/media/food.1490a4de.JPG\";","module.exports = __webpack_public_path__ + \"static/media/monuments.fea1f9d6.JPG\";","module.exports = __webpack_public_path__ + \"static/media/nature.4dbc4727.JPG\";","module.exports = __webpack_public_path__ + \"static/media/car.2e48c452.JPG\";","import React from 'react';\n\n\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n\n  const navStyle = {\n    color: 'white'\n  };\n\n  return (\n   <nav>\n      \n       <h3>Photo's Application</h3>\n       \n\n       <ul className = \"nav-Links\">\n         <Link style = {navStyle} to = \"/recent\">\n           <li>Recent</li>\n           </Link>\n\n           <Link style = {navStyle} to = \"/sport\">\n           <li>Sport</li>\n           </Link>\n\n           <Link style = {navStyle} to = \"/food\">\n           <li>Food</li>\n           </Link>\n\n           <Link style = {navStyle} to = \"/monument\">\n           <li>Monument</li>\n           </Link>\n\n           <Link style = {navStyle} to = \"/nature\">\n           <li>Nature</li>\n           </Link>\n\n           <Link style = {navStyle}  to = \"/car\">\n           <li>Car</li>\n           </Link>\n\n\n       </ul>\n   </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport recent from '../src/img/recent.JPG';\nimport './App.css';\n\nfunction Recent() {\n  return (\n    <div >\n        <h1>Recent Picture</h1>\n      <img src = {recent} >\n        \n      </img>\n    </div>\n  );\n}\n\nexport default Recent;\n","import React from 'react';\nimport sport from '../src/img/sport.JPG';\nimport './App.css';\n\nfunction Sport() {\n  return (\n    <div >\n        <h1>Sport Pictures</h1>\n        <img src = {sport}>\n          \n        </img>\n      \n    </div>\n  );\n}\n\nexport default Sport;\n","import React from 'react';\nimport food from '../src/img/food.JPG';\nimport './App.css';\n\nfunction Food() {\n  return (\n    <div >\n        <h1>Food Pictures</h1>\n        <img src = {food}>\n          \n        </img>\n      \n    </div>\n  );\n}\n\nexport default Food;\n","import React from 'react';\nimport monumnet from '../src/img/monuments.JPG';\nimport './App.css';\n\nfunction Monument() {\n  return (\n    <div >\n        <h1>Monumnet Pictures</h1>\n        <img src = {monumnet} >\n\n        </img>\n      \n    </div>\n  );\n}\n\nexport default Monument;\n","import React from 'react';\nimport nature from '../src/img/nature.JPG';\nimport './App.css';\n\nfunction Nature() {\n  return (\n    <div >\n        <h1>Nature Pictures</h1>\n        <img src = {nature}>\n          \n        </img>\n      \n    </div>\n  );\n}\n\nexport default Nature;\n","import React from 'react';\nimport car from '../src/img/car.JPG';\nimport './App.css';\n\nfunction Car() {\n  return (\n    <div >\n        <h1>Car Picture</h1>\n        <img src = {car} >\n\n        </img>\n      \n    </div>\n  );\n}\n\nexport default Car;\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Recent from './Recent';\nimport Sport from './Sport';\nimport Food from './Food';\nimport Monument from './Monument';\nimport Nature from './Nature';\nimport Car from './Car';\nimport {BrowserRouter as Router,Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n   <Nav />\n   <switch>\n   <Route path = \"/\" exact component = {Home} />\n   <Route path = \"/recent\" component = {Recent} />\n   <Route path = \"/sport\" component = {Sport} />\n   <Route path = \"/food\" component = {Food} />\n   <Route path = \"/monument\" component = {Monument} />\n   <Route path = \"/nature\" component = {Nature} />\n   <Route path = \"/car\" component = {Car} />\n   </switch>\n    </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Home page</h1>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}